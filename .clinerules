# Cline's Learning Journal

## 프로젝트 개요
- **프로젝트명**: NestJS & Next.js 학습 프로젝트
- **목적**: 현대적인 풀스택 웹 개발 기술 스택 학습
- **구조**: 모노레포 (백엔드: NestJS, 프론트엔드: Next.js 15)

## 핵심 학습 패턴

### 백엔드 개발 패턴 (NestJS)
1. **모듈 기반 아키텍처**
   - 각 기능별로 독립적인 모듈 구성
   - auth, users, posts 모듈로 관심사 분리
   - 의존성 주입을 통한 느슨한 결합

2. **계층화 구조**
   - Controller → Service → Repository → Database
   - DTO를 통한 데이터 검증 및 변환
   - Entity를 통한 데이터베이스 매핑

3. **공통 기능 추상화**
   - Guards: 인증/인가 처리
   - Interceptors: 로깅, 변환, 캐싱
   - Pipes: 데이터 검증 및 변환
   - Filters: 예외 처리 및 응답 표준화

### 프론트엔드 개발 패턴 (Next.js 15)
1. **App Router 구조**
   - 파일 기반 라우팅
   - 레이아웃 중첩
   - 서버 컴포넌트 활용

2. **컴포넌트 기반 개발**
   - 재사용 가능한 UI 컴포넌트
   - Props 인터페이스 정의
   - 컴포넌트별 독립적인 테스트

3. **스타일링 전략**
   - Tailwind CSS 4 활용
   - 유틸리티 클래스 조합
   - 반응형 디자인

## 테스트 전략

### 백엔드 테스트
- **단위 테스트**: 서비스 로직 검증
- **통합 테스트**: API 엔드포인트 테스트
- **E2E 테스트**: 전체 사용자 플로우

### 프론트엔드 테스트
- **컴포넌트 테스트**: React Testing Library
- **통합 테스트**: MSW를 통한 API 모킹
- **E2E 테스트**: Playwright

## 개발 워크플로우

### 코드 품질 보장
1. **ESLint**: 코드 스타일 및 품질 검사
2. **Prettier**: 코드 포맷팅 자동화
3. **TypeScript**: 타입 안전성 보장
4. **테스트**: 자동화된 테스트 실행

### Git 워크플로우
1. **브랜치 전략**: feature/기능명
2. **커밋 메시지**: Conventional Commits
3. **코드 리뷰**: PR을 통한 코드 검토

## 프로젝트별 특이사항

### 백엔드 특이사항
- **데이터베이스**: PostgreSQL + TypeORM
- **인증**: JWT 토큰 기반
- **검증**: class-validator 활용
- **테스트**: Jest + Supertest

### 프론트엔드 특이사항
- **프레임워크**: Next.js 15 (App Router)
- **UI**: React 19 + Tailwind CSS 4
- **테스트**: Jest + Playwright + MSW
- **유틸리티**: clsx, tailwind-merge

## 학습한 패턴들

### 성공적인 패턴
1. **모듈화**: 기능별 모듈 분리로 유지보수성 향상
2. **타입 안전성**: TypeScript로 런타임 에러 방지
3. **테스트 우선**: TDD 방식으로 안정성 확보
4. **컴포넌트 재사용**: UI 컴포넌트 라이브러리 구축

### 개선이 필요한 패턴
1. **에러 핸들링**: 표준화된 에러 응답 필요
2. **성능 최적화**: 쿼리 최적화 및 캐싱 전략
3. **보안**: 인증 및 인가 시스템 강화
4. **문서화**: API 문서 및 사용자 가이드

## 자주 사용하는 명령어

### 백엔드 개발
```bash
# 개발 서버 실행
pnpm run start:dev

# 테스트 실행
pnpm run test

# E2E 테스트
pnpm run test:e2e

# 린트 검사
pnpm run lint
```

### 프론트엔드 개발
```bash
# 개발 서버 실행
pnpm run dev

# 테스트 실행
pnpm run test

# E2E 테스트
pnpm run test:e2e

# 빌드
pnpm run build
```

### 데이터베이스 관리
```bash
# PostgreSQL 접속
psql -U postgres -d nest_learning

# 테이블 확인
\dt

# 테이블 구조 확인
\d users
\d posts
```

## 문제 해결 패턴

### 자주 발생하는 문제
1. **데이터베이스 연결 실패**
   - 환경 변수 확인
   - PostgreSQL 서비스 상태 확인
   - 방화벽 설정 확인

2. **타입 에러**
   - TypeScript 설정 확인
   - 타입 정의 확인
   - 컴파일 옵션 확인

3. **테스트 실패**
   - 테스트 환경 설정 확인
   - 모킹 설정 확인
   - 비동기 처리 확인

### 해결 방법
1. **로그 확인**: 에러 메시지 자세히 분석
2. **문서 참조**: 공식 문서 및 커뮤니티 자료
3. **단계별 디버깅**: 작은 단위로 나누어 테스트
4. **커뮤니티 활용**: Stack Overflow, GitHub Issues

## 향후 개선 계획

### 단기 계획 (1-2주)
1. **인증 시스템 완성**: JWT 토큰 기반 인증
2. **API 테스트 완성**: 모든 엔드포인트 테스트
3. **프론트엔드 연동**: 백엔드 API와 연동

### 중기 계획 (1-2개월)
1. **성능 최적화**: 쿼리 최적화, 캐싱
2. **보안 강화**: 인증/인가 시스템 개선
3. **사용자 경험**: UI/UX 개선

### 장기 계획 (3-6개월)
1. **마이크로서비스**: 서비스 분리 고려
2. **모니터링**: 로그 수집 및 분석
3. **배포 자동화**: CI/CD 파이프라인 구축

## 메모리 뱅크 활용법

### 새로운 작업 시작 시
1. **메모리 뱅크 읽기**: 전체 컨텍스트 파악
2. **현재 상태 확인**: activeContext.md 확인
3. **진행 상황 파악**: progress.md 확인
4. **작업 계획 수립**: 구체적인 작업 계획

### 작업 완료 후
1. **진행 상황 업데이트**: progress.md 업데이트
2. **현재 상태 업데이트**: activeContext.md 업데이트
3. **학습 내용 기록**: .clinerules 업데이트
4. **다음 단계 계획**: 다음 작업 계획

## 프로젝트 지능

### 코드 품질 지표
- **ESLint 에러**: 0개 목표
- **TypeScript 에러**: 0개 목표
- **테스트 커버리지**: 80% 이상
- **성능 지표**: Lighthouse 90점 이상

### 개발 효율성
- **핫 리로드**: 개발 중 즉시 변경사항 반영
- **자동 테스트**: 코드 변경 시 자동 테스트 실행
- **타입 체크**: 컴파일 타임 에러 방지
- **코드 포맷팅**: 자동화된 코드 스타일

### 학습 효과
- **실무 경험**: 실제 프로젝트 수준의 코드
- **모범 사례**: 업계 표준을 따르는 구조
- **테스트 전략**: 완전한 테스트 환경
- **문서화**: 체계적인 문서 관리
